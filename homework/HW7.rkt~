;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname content) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;; Instructions
;; 1. Do not create, modify or delete any line that begins with ";;!". These are
;;    markers that we use to segment your file into parts to facilitate grading.
;; 2. You must follow the _design recipe_ for every problem. In particular,
;;    every function you define must have at least three check-expects (and
;;    more if needed).
;; 3. You must follow the Style Guide:
;;    https://pages.github.khoury.northeastern.edu/2500/2024F/style.html
;; 4. You must submit working code. In DrRacket, ensure you get on errors
;;    when you click Run. After you submit on Gradescope, you'll get instant
;;    feedback on whether or Gradescope can run your code, and your code must
;;    run on Gradescope to receive credit from the autograder.
;; 5. On some problems, you can get automated feedback on your in-progress work
;;    from FeedBot, a system developed by the course staff. When you submit your
;;    assignment, you will see a link to the FeedBot report along with the autograder
;;    feedback. Only a certain number of submissions will get this, and submissions
;;    close together will not receive the feedback.

;;! Problem 1

;; The objective in this problem is to define the following functions.
;; We have given their signatures, purpose statements, and check-expects.

(define-struct pair [first second])
;; A [Pair X] is a (make-pair X X) representing a pair of values of type X
;; - first is the first item in the pair
;; - second is the second item in the pair

;; strings-or-odds : [List-of [Pair Number]] -> [List-of [Pair String]]
;; For each pair converts the first item to a string and the second to "odd".
(check-expect (strings-or-odds (list (make-pair 53 23) (make-pair 40 11)))
              (list (make-pair "53" "odd") (make-pair "40" "odd")))
(check-expect (strings-or-odds (list (make-pair 20 30) (make-pair 0 1) (make-pair 3 4)))
              (list (make-pair "20" "odd") (make-pair "0" "odd") (make-pair "3" "odd")))
(check-expect (strings-or-odds '()) '())

;; alternate-case : [List-of [Pair String]] -> [List-of [Pair String]]
;; Uppercase the first item of each pair. Leaves the second item unchanged.
(check-expect (alternate-case (list (make-pair "hello" "world") (make-pair "this" "Is")))
              (list (make-pair "HELLO" "world") (make-pair "THIS" "Is")))
(check-expect
 (alternate-case (list (make-pair "one" "two") (make-pair "three" "FOUR") (make-pair "five" "six")))
 (list (make-pair "ONE" "two") (make-pair "THREE" "FOUR") (make-pair "FIVE" "six")))
(check-expect (alternate-case (list (make-pair "apple" "banana")))
              (list (make-pair "APPLE" "banana")))

;; flip-or-keep-boolean : [List-of [Pair Boolean]] -> [List-of [Pair Boolean]]
;; Flip the first item of each pair, keep the second unchanged.
(check-expect (flip-or-keep-boolean (list (make-pair #true #true) (make-pair #true #true)))
              (list (make-pair #false #true) (make-pair #false #true)))
(check-expect (flip-or-keep-boolean (list (make-pair #false #false) (make-pair #false #false)))
              (list (make-pair #true #false) (make-pair #true #false)))
(check-expect (flip-or-keep-boolean (list (make-pair #true #false) (make-pair #false #true)))
              (list (make-pair #false #false) (make-pair #true #true)))

;; However, you must not directly use the list template when you define them!
;;
;; Instead, first design a list abstraction (following the list template), then
;; use that abstraction to design the three functions.

;;!! IMPORTANT: Write your response BELOW this line:

;; map-pairs : (X -> Y) [List-of X] -> [List-of Y]
;; applies a function to each element in a list of pairs.
(define (map-pairs f lst)
  (cond
    [(empty? lst) empty]
    [(cons? lst) (cons (f (first lst)) (map-pairs f (rest lst)))]))

;; convert-string-or-odds : [Pair Number] -> [Pair String]
;; takes a pair of numbers, makes the first element a string and the second element "odds"
(define (convert-string-or-odds pair) 
  (make-pair (number-> string (pair-first pair)) "odds"))

(define (strings-or-odds lst)
  (map-pairs convert-string-or-odds lst))

;; uppercase : [Pair String] -> [Pair String]
;; takes a pair of strings, makes the first element all uppercase and the second element unchanged
(define (uppercase pair)
  (make-pair (string-upcase (pair-first pair)) (pair-second pair)))

(define (alternate-case lst)
  (map-pairs uppercase lst))

;; flip : [Pair Boolean] -> [Pair Boolean]
;; takes a pair of booleans, flips the first element and the second element unchanged
(define (flip pair)
  (make-pair (not (pair-first pair)) (pair-second pair)))

(define (flip-or-keep-boolean lst)
  (map-pairs flip lst))

;;! Problem 2

;; Recall our student demographic survey from HW5:

;; Demographic is one of:
;; - "International"
;; - "American Indian or Alaska Native"
;; - "Asian"
;; - "Black or African American"
;; - "Hispanic or Latinx"
;; - "Native Hawaiian or Pacific Islander"
;; - "Two or More Races"
;; - "White"
;; - "Race and Ethnicity Unknown"
;; which represents responses to a mutltiple-choice question about citizenship, ethnicity,
;; and race at Northeastern: https://diversity.northeastern.edu/resources/data/our-demographics/

(define (demo-template r)
  (cond
    [(string=? r "International") ...]
    [(string=? r "American Indian or Alaska Native") ...]
    [(string=? r "Asian") ...]
    [(string=? r "Black or African American") ...]
    [(string=? r "Hispanic or Latinx") ...]
    [(string=? r "Native Hawaiian or Pacific Islander") ...]
    [(string=? r "Two or More Races") ...]
    [(string=? r "White") ...]
    [(string=? r "Race and Ethnicity Unknown") ...]))

(define-struct student [name age demographic legacy? next])
;;! A Responses is one of:
;;! - "end of responses"
;;! - (make-student String Integer Demographic Boolean Responses)
;;! Interpretation: Student responses to a demographic survey.

(define RESPONSES-EX-1 "end of responses")
(define RESPONSES-EX-2 (make-student "Alice" 18 "International" #false "end of responses"))
(define RESPONSES-EX-3
  (make-student "Alice"
                18
                "International"
                #false
                (make-student "Bob" 19 "Two or More Races" #true "end of responses")))

;; In this problem, you will be asked to update this data definition. You should create
;; new versions of the relevant structs/functions by naming them `.../v2`, `.../v3`, etc.

;;! Part A

;; The university has decided that the nested responses have become too unwieldy
;; to parse. Replace the definition with a new data structure that represents an
;; arbitrary number of survey results using a list. Consider how the definition
;; of a student should change.

;;!! IMPORTANT: Write your response BELOW this line:

;;! Part B

;; Given our concerns about accuracy from HW 5, the university has decided to
;; further modify the survey so students can select multiple options of
;; Demographic in response to the question about citizenship, ethnicity, and
;; race. Revise the Student and Responses data definitions accordingly, providing `.../v3` versions.

;;!! IMPORTANT: Write your response BELOW this line:

;;! Part C (PART 1)
;; INTERPRETIVE QUESTIONS
;;
;; When collecting demographic data, we want to strike an effective balance
;; between allowing for accurate self-expression from respondents and collecting
;; data in a way that allows for meaningful analysis. In an effort to enhance
;; students' abilities to self-express, we're considering adding an "Other"
;; option, in which students can submit a free text response to self-identify.

;; -- Universities track student demographic data (in part) to evaluate how
;; their efforts to support a diverse student body have been effective or
;; ineffective over time. In 1-2 sentences, explain how adding the "Other"
;; option might complicate analysis.

;;!! IMPORTANT: Write your response BELOW this line:

;;! Part C (PART 2)
;; -- In 2-3 sentences, how might adding the "Other" option benefit students?
;; How might it benefit the university?

;;!! IMPORTANT: Write your response BELOW this line:

;;! Part D

;; You've been tasked to identify how many students put down "Race and Ethnicity
;; Unknown", as that might indicate students didn't feel the existing options
;; allowed them to express their identity. Design a function
;; `count-unknown-students` that returns the number of such students, given the
;; latest version of your data definition as input. Consider which list
;; abstraction(s) would be useful here (you are not required to use one, but
;; may).

;;!! IMPORTANT: Write your response BELOW this line:

;;! Part E
;; INTERPRETIVE QUESTION
;;
;; Read the following article: https://tinyurl.com/bdza4nt7
;;
;; Imagine you're working for a real estate company, and your boss wants to
;; target advertisements using the demographic data collected above. Write a 2-3
;; sentence memo to your boss explaining why you can't advertise on the basis of
;; racial demographic data, referring to the article in your answer. Explain why
;; the advertisements your boss proposed have the potential to violate the
;; provisions of the Fair Housing Act. Offer an alternative to your boss's
;; proposal.

;;!! IMPORTANT: Write your response BELOW this line:

;;! Part F

;; Since this personal racial data is sensitive and the university only needs
;; the demographic data in aggregate, the university has decided they would like
;; to anonymize the data for privacy purposes. Design a data definition for a
;; student response that does not include the student's name. Then write a
;; function, `anonymize`, that converts from a series of responses containing
;; student names to your new data definition.

;;!! IMPORTANT: Write your response BELOW this line:
